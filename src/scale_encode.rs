#![allow(dead_code)]
use codec::{Decode, Encode, MaxEncodedLen};
use frame_support::BoundedVec;
use hex_literal::hex;
use sp_consensus_grandpa::GrandpaJustification;
use sp_core::{crypto::Ss58Codec, ed25519::Public};
use sp_runtime::traits::ConstU32;

pub type BoundedAuthorityList = BoundedVec<(Public, u64), ConstU32<100_000>>;

#[derive(Encode, Decode, MaxEncodedLen)]
pub struct StoredPendingChange {
    /// The block number this was scheduled at.
    pub scheduled_at: u32,
    /// The delay in blocks until it will be applied.
    pub delay: u32,
    /// The next authority set, weakly bounded in size by `Limit`.
    pub next_authorities: BoundedAuthorityList,
    /// If defined it means the change was forced and the given block number
    /// indicates the median last finalized block when the change was signaled.
    pub forced: Option<u32>,
}

impl StoredPendingChange {
    // Constructor function to create an instance of StoredPendingChange
    pub fn new(
        scheduled_at: u32,
        delay: u32,
        next_authorities: BoundedAuthorityList,
        forced: Option<u32>,
    ) -> Self {
        StoredPendingChange {
            scheduled_at,
            delay,
            next_authorities,
            forced,
        }
    }
}

pub fn encode() {
    // Load ed25519 keys of  the validators
    let ss58_addresses = vec![
        "5FCPJZaG5DJrQ9q2roHqtkgHgFPk8Ky18JPv1y5fSn87GWJF",
        "5HndcxSPvryrobq9SLfBZQrZ5mdrXKBUztnAwDY4gDFUEQ6h",
        "5E7Xr6BcGVZJBN1Zc27ZiYMK9HLfJLEAjPCkWBz4qn3LWgrW",
        "5G6FZ54tergPzSd1SxFqQL3V6viJ2D2Hf2DPcKuRxXnK4xQ5",
        "5FxpAURrSgoTKWJxfk2q8ZBauqyf4m9BqDxVC82q8nNjcdVe",
        "5DVg4ufvzJRYHbqpL6zS8RnDx11479n1c6ETXMDCPzV8T9Jt",
        "5EX6TsXMCxkPUv7x6Tk1hWZfJMGW2WbhndHxiVPvQY5u473j",
    ];
    let scheduled_at = 344815;
    let delay = 1;
    let mut next_authorities_vec = Vec::<(Public, u64)>::new();
    for ss58_address in ss58_addresses {
        let public_key = Public::from_ss58check(ss58_address).expect("Error decoding SS58");
        next_authorities_vec.push((public_key, 1u64));
    }

    // Convert Vec to BoundedAuthorityList
    let next_authorities =
        BoundedVec::try_from(next_authorities_vec).expect("Error converting to bounded_vec");
    let forced = Some(344637);

    let pending_change = StoredPendingChange::new(scheduled_at, delay, next_authorities, forced);
    println!("{}", hex::encode(pending_change.encode()));
}

pub fn decode_justification() {
    // let just = hex!("5b54000000000000980e76efe42ac17031fcfbba00330c702b647f6123b321bea1e04631949baecb3121000004980e76efe42ac17031fcfbba00330c702b647f6123b321bea1e04631949baecb312100008bd6c347e65dcd2ae9ed85860ba0b409dc646e4acc197b10702de53827e129dcb1f70d312dbb03d94cd6a64e897af0db37c876348354e49d4eed7ab7e512720e49bb1c210353582c63040bc54e5fe6017b7a551f96c7f454850bd98c2be9d5be00");
    let just = hex!("5d3300000000000048382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef90501005448382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100681a8ad3914e4d6b234fe8d972971baed2ec0f42de4834f433e95b78d1add071e4cbbb3b25bc1c6c14aef25763663317e358b6f32f316d6d264887d4e49d9401010a6ca0fcb57495d5ff42f5feb4f6d4654161f7fdaf3006f9a5e8bc0568922548382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef905010036dab21ec70f6329a5f661251503fc8b37dbcb98cf4dff55b024f777ce5deaa2eb5b306b80e950c75264379351f2d55988eca778a94bddd48ed049e95ca009020d013580b489edc58464daf56eb96d320acec5d08e0d0b39ee6a6448c7bd0d7448382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100f43417948d6e9b7c182c8a132184db6fe8a2c1be979c9f477f665cf1f4156a0974ae648d4e34561208d2ec2ad2fec0dc4bad815601440a10d4475553c68edf0b1c44e50ed028e76bdcb6134e1a48ec0f4fe61305d7c9c556885d92bbcbda58bd48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef90501001b51780439147e7f190d7e85abaf26f88263529084c520a84e7167af725bd1ab93b026044b38ee0ae78bc476af54f1e1469076795270b7eb9cb61e1ae3b7a4091ca1119a3161bed07e75401e86513f91bd4527b28d544c09508a34727ea316ae48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef905010020e9a72399bbbf8ca04e99263da92b4f01e6ae3921b1ce69998834abf35ed70dd35b8b4f32a0e400917878a7dbb6d394c3aed284a95b07e8397d70ebd1ee1d0d2b1277257b88982b895e9093143686fd2ff7c6e2dc9df9716dd74ae0e22968d448382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100d7f0df3c1f60a285900439801cca069de6a176d55fd5db1cc4337a17bdf14d23085fc0f3c1fbbeebe267a09b855b11dfcf6332ceb4245f45003819f97503710d2ee761f81711122bdcbac90f3fb6d21622f8a046388bd974c9a8fd53fdb1676948382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100132476ae78024d0c8f151bbecc85816c6e5eaae1d314c0caa915e5c8d374731527fccf23b5809bada6a579bec4bcbb2162420ca300c5fa06b52f02cc113ee0013fbfeb12ded4f4eed1486f86a8b44e33e4785220016d516ddfa71173be9e32ee48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef905010043b96350abb872eed981e1d8a04d2e4ec14ef3062d67ed670935e02edfa2c18190175be82a4e1491206abc20f6c9cc9233ffb586e9d18115a276c68e83d5b60e44dc4f4d7e11cd01fc527cac88a9368ce221582a943f66c8a112ed95c988e1f548382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100b6fe83eb7c6528f94266d50b3ec394e555d50dc3832f7db24c673e0be914a805c6dc5d1d5f5ec720f38ce0232dc8fbae01952666b3f79b0d2d3dac487fe3eb0b5381da9b78624b82ca273f898597a06ffabefc708db9c1d04aaa05c7322fed2948382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100e4f63b89ae4130e0f5cf8d7daa8ba71fbb0f79f05cd33ecfcf53c706971b04abd6ea42719b3ff8f53e52ab2adbf27be3db979ad193d7a60391a86f767fea7801613dcf13d65248c0e662ef3cb1669352ee967bc69dc349bfe6d10ad5189cb6eb48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100827b77765424f94fd6429d012182b65fe4628306a66e484c97aa58ccb5bcb8887b328d910994479a6fc42bdcb4e1ee4a9124dd3e64f1193c3b945445f6973d0f65a81bc689ef35844916124de8d3e6ff423b905bc10b1496ea6b36f9a223d78b48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100774f1b56be754994f212b35dbfa97d031ac56020ee379a5bca134a77288c6740f588cf2d23a33a9e61adf2a9d3de91996080086e64c430161e2474ef8913800e6a61674cee74a23d49e7700d5fc3d177b53c5fab5efd971216039ec462379cfc48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100efd67567bd74267987d0d704ff777df288ef9acc2ce3a270ae3905f0a1aca4635cb3357133aecd65c471a190af7b8e9d1cca1764e69f007a43f707ac87b2f409799dcf573751e720a3109046390b3c16c2d77f8bf31fc5934ddb736971045d6a48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100fbd12537cc1804587e4b3da05d37471df631a85259545a1c5333f6bf99c8420355a94735f258f45b0eb485f6283d367f77f6570060056ad5c1ec9017b4fce6037ebf1a3d865e33b1a6309a11a310244e4b01b005e28b532ae85c8927b9fad4a948382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef90501005c849c34aab8e8fe4579040b81f7af2a2bf3efa05ddfb090e7ab6e1ff81b22a898f73d7a5d1286b5e91b01fce79187ad653367d4e7fed4f4ad4319497fc657098c7b8922fe185a317e153dfb306d50ad4529d43175ba265793810ea142475aa848382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef905010040fe3224f4603613690942ad9086d9f688f75153eaabbe0fbf4523c9732fcb6ff72261e87d96f1c635b0fa2b6ffaa37f44d0390d83cc2c0e631811d2de71b90facf83d9993cef3b09ac6697fc8278fd880afb84ae3a03075f892d7e66c209ede48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef905010024d92c27225287705d1f7dbe31fc5cc933fd4d67d76fd7d07371ae203a5856908d15415624a1a581ca85ab7925be7d307118166ec367eaf37d5506c8a2a5d705c0fee1f4173e4684618857918142cf42d68843cb9b14941a43fe926735684d6d48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100aced498f170ac876aa9653703590b586e0d4f022b1eb958fe93db24ff5be9c074f57d5f30b268996993a241b94fff9ec30fc525a0fcf6b214c0b513a3c0b8b0bc53ec7c6e67d2b6d934b7c12061e0f9566611fb6a50c0e2a5287d4c4a8487d0b48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef90501007c6d3c0512709b41a35cffb59a0b6be30f10208504eb471d096552cf7796bc512892fb7f007dd17969888df5fd22f299ddb5fdbf1af3c7d19ee08e33c661cd09d210b12e4b74cbbd7f69a787aa435b8ce6052943e53a690209418ace205c399948382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100718f074d462c6f8f16efe8175c30b69d183c7077b2e754126d342e92965f4e9559517e165eaaa2ce43744f52965b99a75d35414acdf39fc39c989c1c52a1d10de6ed67d10faf458a9f5de60f26399f8da39f071475e49c54db2bfd3c12704f0a48382b32bf6a706aa65d9187cf7420551b494ea7c5b5625a167e272d5f3302fef9050100e47b12476a66e2af493765057d46ae61346d03ccd77176dcf94df0a137e0dfdd4ec1d55a60de311af5360eae47d90d128e9dca2bc61308d06f1a0bec380afd0cfc074fe422fd31f9c21f38a6c7ef179dd85aa89b736a637d0b75fc778623946000");
    let decoded_just: GrandpaJustification<
        sp_runtime::generic::Header<u32, sp_runtime::traits::BlakeTwo256>,
    > = Decode::decode(&mut just.as_ref()).unwrap();
    println!("{:?}", decoded_just);
}
